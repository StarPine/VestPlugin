apply plugin: 'com.android.application'

android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "com.starpine.vestplugin"
        minSdkVersion 16
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

apply plugin: 'com.starpine.vest'

vestGuard {
    guardConfig {
        guardWordAmount 2000
        guardWord "tyujg"
        finallyGuardWordFile "fl-guard.txt"
    }
//    obfuscationdictionary "fl-guard.txt"
    classobfuscationdictionary "fl-guard.txt"
    sourceClassPath "$projectDir/src"
    sourceDirPath "$projectDir/src/main/java/com/starpine/vestplugin"
    newDirWord "piup"
}

task forpath() {
    doLast {
        def index = 0
        FileTree sourceFileTree = fileTree("../") {
            include '**/drawable**/**.png'
            include '**/mipmap**/**.png'
        }
        sourceFileTree.each {
            index++
            println it.path
            println it.name
            def sourceName = it.name
            def replace = it.name.replace(".png", "")
            FileTree targetFileTree = fileTree("../") {
                include '**/drawable**/**.png'
                include '**/mipmap**/**.png'
                include '**/**.java'
                include '**/layout/*.xml'
                include '**/AndroidManifest.xml'
                exclude '**/androidTest/**'
                exclude '**/test/**'
            }
            targetFileTree.each { file ->
                if (file.path.endsWith(".png")) {
                    if (file.name.equals(sourceName)) {
                        File file1 = new File(file.path)
                        println file1.renameTo(file1.parent + File.separator + "aaa${index}.png")
//                        println file1.parent +File.separator+"aaa${index}.png"
                    }

                } else if (file.path.endsWith(".java")) {

                } else if (file.path.endsWith(".xml")) {

                }
            }
        }
    }
}